#ifndef OV7670_INIT_H
#define OV7670_INIT_H
#include <stdint.h>
#include "ov7670_regs.h"
#include "CameraOV7670RegisterDefinitions.h"

const uint8_t OV7670_reg[][2] = { { 0x12, 0x80 }, // SCCB Register Reset

		// Image format
		//{ 0x12, 0x8 },		// 0x14 = QVGA size, RGB mode; 0x8 = QCIF, YUV, 0xc = QCIF (RGB)
		{ 0xc, 0x8 }, //
		{ 0x11, 0b1000000 }, // Use external clock directly

		{ 0xb0, 0x84 },		//Color mode (Not documented??)

		// Hardware window
		{ 0x11, 0x01 },		//PCLK settings, 15fps
		{ 0x32, 0x80 },		//HREF
		{ 0x17, 0x17 },		//HSTART
		{ 0x18, 0x05 },		//HSTOP
		{ 0x03, 0x0a },		//VREF
		{ 0x19, 0x02 },		//VSTART
		{ 0x1a, 0x7a },		//VSTOP

		// Scalling numbers
		{ 0x70, 0x3a },		//X_SCALING
		{ 0x71, 0x35 },		//Y_SCALING
		{ 0x72, 0x11 },		//DCW_SCALING
		{ 0x73, 0xf0 },		//PCLK_DIV_SCALING
		{ 0xa2, 0x02 },		//PCLK_DELAY_SCALING

		// Matrix coefficients
		{ 0x4f, 0x80 }, //
		{ 0x50, 0x80 }, //
		{ 0x51, 0x00 }, //
		{ 0x52, 0x22 }, //
		{ 0x53, 0x5e }, //
		{ 0x54, 0x80 }, //
		{ 0x58, 0x9e },

		// Gamma curve values
		{ 0x7a, 0x20 }, //
		{ 0x7b, 0x10 }, //
		{ 0x7c, 0x1e }, //
		{ 0x7d, 0x35 }, //
		{ 0x7e, 0x5a }, //
		{ 0x7f, 0x69 }, //
		{ 0x80, 0x76 }, //
		{ 0x81, 0x80 }, //
		{ 0x82, 0x88 }, //
		{ 0x83, 0x8f }, //
		{ 0x84, 0x96 }, //
		{ 0x85, 0xa3 }, //
		{ 0x86, 0xaf }, //
		{ 0x87, 0xc4 }, //
		{ 0x88, 0xd7 }, //
		{ 0x89, 0xe8 },

		// AGC and AEC parameters
		{ 0xa5, 0x05 }, //
		{ 0xab, 0x07 }, //
		{ 0x24, 0x95 }, //
		{ 0x25, 0x33 }, //
		{ 0x26, 0xe3 }, //
		{ 0x9f, 0x78 }, //
		{ 0xa0, 0x68 }, //
		{ 0xa1, 0x03 }, //
		{ 0xa6, 0xd8 }, //
		{ 0xa7, 0xd8 }, //
		{ 0xa8, 0xf0 }, //
		{ 0xa9, 0x90 }, //
		{ 0xaa, 0x94 }, //
		{ 0x10, 0x00 },

		// AWB parameters
		{ 0x43, 0x0a }, //
		{ 0x44, 0xf0 }, //
		{ 0x45, 0x34 }, //
		{ 0x46, 0x58 }, //
		{ 0x47, 0x28 }, //
		{ 0x48, 0x3a }, //
		{ 0x59, 0x88 }, //
		{ 0x5a, 0x88 }, //
		{ 0x5b, 0x44 }, //
		{ 0x5c, 0x67 }, //
		{ 0x5d, 0x49 }, //
		{ 0x5e, 0x0e }, //
		{ 0x6c, 0x0a }, //
		{ 0x6d, 0x55 }, //
		{ 0x6e, 0x11 }, //
		{ 0x6f, 0x9f }, //
		{ 0x6a, 0x40 }, //
		{ 0x01, 0x40 }, //
		{ 0x02, 0x60 }, //
		{ 0x13, 0xe7 },

		// Additional parameters
		{ 0x34, 0x11 }, //
		{ 0x3f, 0x00 }, //
		{ 0x75, 0x05 }, //
		{ 0x76, 0xe1 }, //
		{ 0x4c, 0x00 }, //
		{ 0x77, 0x01 }, //
		{ 0xb8, 0x0a }, //
		{ 0x41, 0x18 }, //
		{ 0x3b, 0x12 }, //
		{ 0xa4, 0x88 }, //
		{ 0x96, 0x00 }, //
		{ 0x97, 0x30 }, //
		{ 0x98, 0x20 }, //
		{ 0x99, 0x30 }, //
		{ 0x9a, 0x84 }, //
		{ 0x9b, 0x29 }, //
		{ 0x9c, 0x03 }, //
		{ 0x9d, 0x4c }, //
		{ 0x9e, 0x3f }, //
		{ 0x78, 0x04 }, //
		{ 0x0e, 0x61 }, //
		{ 0x0f, 0x4b }, //
		{ 0x16, 0x02 }, //
		{ 0x1e, 0x00 }, //
		{ 0x21, 0x02 }, //
		{ 0x22, 0x91 }, //
		{ 0x29, 0x07 }, //
		{ 0x33, 0x0b }, //
		{ 0x35, 0x0b }, //
		{ 0x37, 0x1d }, //
		{ 0x38, 0x71 }, //
		{ 0x39, 0x2a }, //
		{ 0x3c, 0x78 }, //
		{ 0x4d, 0x40 }, //
		{ 0x4e, 0x20 }, //
		{ 0x69, 0x00 }, //
		{ 0x6b, 0x0a }, // Bypass PLL, 0x3a Bypass internal regulator / 0x0A Enable internal regulator (1.8V)
		{ 0x74, 0x10 }, //
		{ 0x8d, 0x4f }, // error missing ack/nak---------------------------
		{ 0x8e, 0x00 }, //
		{ 0x8f, 0x00 }, //
		{ 0x90, 0x00 }, //
		{ 0x91, 0x00 }, //
		{ 0x96, 0x00 }, //
		{ 0x9a, 0x00 }, // error---------------------------
		{ 0xb1, 0x0c }, //
		{ 0xb2, 0x0e }, //
		{ 0xb3, 0x82 }, //
		{ 0x4b, 0x01 },

		// extra RGB settings, added 2024-08-05
		{},

		// list end
		{ 0x00, 0x00 }, };
const uint8_t OV7670_rgb[][2] ={
		// Manual output format, RGB, use RGB565 and full 0-255 output range
		{OV7670_REG_COM7, OV7670_COM7_RGB},
		{OV7670_REG_RGB444, 0},
		{OV7670_REG_COM15, OV7670_COM15_RGB565 | OV7670_COM15_R00FF},
		// list end
		{ 0x00, 0x00 }};
const uint8_t OV7670_yuv[][2] ={
		// Manual output format, YUV, use full output range
		{OV7670_REG_COM7, OV7670_COM7_YUV},
		{OV7670_REG_COM15, OV7670_COM15_R00FF},
		// list end
		{ 0x00, 0x00 }};

const uint8_t regsDefault [][2] = { //from the linux driver
                         {REG_COM7, COM7_RESET},
                         {REG_TSLB,  0x04},	/* OV */
                         {REG_COM7, 0},	    /* VGA */
    /*
     * Set the hardware window.  These values from OV don't entirely
     * make sense - hstop is less than hstart.  But they work...
     */
                         {REG_HSTART, 0x13},	{REG_HSTOP, 0x01},
                         {REG_HREF, 0xb6},	{REG_VSTART, 0x02},
                         {REG_VSTOP, 0x7a},	{REG_VREF, 0x0a},

                         {REG_COM3, 0},	{REG_COM14, 0},
    /* Mystery scaling numbers */
                         {0x70, 0x3a},		{0x71, 0x35},
                         {SCALING_DCWCTR, 0x11},		{SCALING_PCLK_DIV, 0xf0},
                         {0xa2,/* 0x02 changed to 1*/1},
                         {REG_COM10, 0},
    /* Gamma curve values */
                         {0x7a, 0x20},		{0x7b, 0x10},
                         {0x7c, 0x1e},		{0x7d, 0x35},
                         {0x7e, 0x5a},		{0x7f, 0x69},
                         {0x80, 0x76},		{0x81, 0x80},
                         {0x82, 0x88},		{0x83, 0x8f},
                         {0x84, 0x96},		{0x85, 0xa3},
                         {0x86, 0xaf},		{0x87, 0xc4},
                         {0x88, 0xd7},		{0x89, 0xe8},
    /* AGC and AEC parameters.  Note we start by disabling those features,
       then turn them only after tweaking the values. */
                         {REG_COM8, COM8_FASTAEC | COM8_AECSTEP},
                         {REG_GAIN, 0},	{REG_AECH, 0},
                         {REG_COM4, 0x40}, /* magic reserved bit */
                         {REG_COM9, 0x18}, /* 4x gain + magic rsvd bit */
                         {REG_BD50MAX, 0x05},	{REG_BD60MAX, 0x07},
                         {REG_AEW, 0x95},	{REG_AEB, 0x33},
                         {REG_VPT, 0xe3},	{REG_HAECC1, 0x78},
                         {REG_HAECC2, 0x68},	{0xa1, 0x03}, /* magic */
                         {REG_HAECC3, 0xd8},	{REG_HAECC4, 0xd8},
                         {REG_HAECC5, 0xf0},	{REG_HAECC6, 0x90},
                         {REG_HAECC7, 0x94},
                         {REG_COM8, COM8_FASTAEC|COM8_AECSTEP|COM8_AGC|COM8_AEC},
                         {0x30,0},{0x31,0},//disable some delays
    /* Almost all of these are magic "reserved" values.  */
                         {REG_COM5, 0x61},	{REG_COM6, 0x4b},
                         {0x16, 0x02},		{REG_MVFP, 0x07},
                         {0x21, 0x02},		{0x22, 0x91},
                         {0x29, 0x07},		{0x33, 0x0b},
                         {0x35, 0x0b},		{0x37, 0x1d},
                         {0x38, 0x71},		{0x39, 0x2a},
                         {REG_COM12, 0x78},	{0x4d, 0x40},
                         {0x4e, 0x20},		{REG_GFIX, 0},
    /*{0x6b, 0x4a},*/		{0x74,0x10},
                         {0x8d, 0x4f},		{0x8e, 0},
                         {0x8f, 0},		{0x90, 0},
                         {0x91, 0},		{0x96, 0},
                         {0x9a, 0},		{0xb0, 0x84},
                         {0xb1, 0x0c},		{0xb2, 0x0e},
                         {0xb3, 0x82},		{0xb8, 0x0a},

    /* More reserved magic, some of which tweaks white balance */
                         {0x43, 0x0a},		{0x44, 0xf0},
                         {0x45, 0x34},		{0x46, 0x58},
                         {0x47, 0x28},		{0x48, 0x3a},
                         {0x59, 0x88},		{0x5a, 0x88},
                         {0x5b, 0x44},		{0x5c, 0x67},
                         {0x5d, 0x49},		{0x5e, 0x0e},
                         {0x6c, 0x0a},		{0x6d, 0x55},
                         {0x6e, 0x11},		{0x6f, 0x9e}, /* it was 0x9F "9e for advance AWB" */
                         {0x6a, 0x40},		{REG_BLUE, 0x40},
                         {REG_RED, 0x60},
                         {REG_COM8, COM8_FASTAEC|COM8_AECSTEP|COM8_AGC|COM8_AEC|COM8_AWB},

    /* Matrix coefficients */
                         {0x4f, 0x80},		{0x50, 0x80},
                         {0x51, 0},		{0x52, 0x22},
                         {0x53, 0x5e},		{0x54, 0x80},
                         {0x58, 0x9e},

                         {REG_COM16, COM16_AWBGAIN},	{REG_EDGE, 0},
                         {0x75, 0x05},		{REG_REG76, 0xe1},
                         {0x4c, 0},		{0x77, 0x01},
                         {REG_COM13, /*0xc3*/0x48},	{0x4b, 0x09},
                         {0xc9, 0x60},		/*{REG_COM16, 0x38},*/
                         {0x56, 0x40},

                         {0x34, 0x11},		{REG_COM11, COM11_EXP|COM11_HZAUTO},
                         {0xa4, 0x82/*Was 0x88*/},		{0x96, 0},
                         {0x97, 0x30},		{0x98, 0x20},
                         {0x99, 0x30},		{0x9a, 0x84},
                         {0x9b, 0x29},		{0x9c, 0x03},
                         {0x9d, 0x4c},		{0x9e, 0x3f},
                         {0x78, 0x04},

    /* Extra-weird stuff.  Some sort of multiplexor register */
                         {0x79, 0x01},		{0xc8, 0xf0},
                         {0x79, 0x0f},		{0xc8, 0x00},
                         {0x79, 0x10},		{0xc8, 0x7e},
                         {0x79, 0x0a},		{0xc8, 0x80},
                         {0x79, 0x0b},		{0xc8, 0x01},
                         {0x79, 0x0c},		{0xc8, 0x0f},
                         {0x79, 0x0d},		{0xc8, 0x20},
                         {0x79, 0x09},		{0xc8, 0x80},
                         {0x79, 0x02},		{0xc8, 0xc0},
                         {0x79, 0x03},		{0xc8, 0x40},
                         {0x79, 0x05},		{0xc8, 0x30},
                         {0x79, 0x26},

                         {0x00, 0x00},	/* END MARKER */
};

const uint8_t regsRGB565 [][2] = {
    {REG_COM7, COM7_RGB}, /* Selects RGB mode */
    {REG_RGB444, 0},	  /* No RGB444 please */
    {REG_COM1, 0x0},
    {REG_COM15, COM15_RGB565|COM15_R00FF},
    {REG_COM9, 0x6A},	 /* 128x gain ceiling; 0x8 is reserved bit */
    {0x4f, 0xb3},		 /* "matrix coefficient 1" */
    {0x50, 0xb3},		 /* "matrix coefficient 2" */
    {0x51, 0},		 /* vb */
    {0x52, 0x3d},		 /* "matrix coefficient 4" */
    {0x53, 0xa7},		 /* "matrix coefficient 5" */
    {0x54, 0xe4},		 /* "matrix coefficient 6" */
    {REG_COM13, /*COM13_GAMMA|*/COM13_UVSAT},
    {0x00, 0x00}	/* END MARKER */
};

// First few lines are garbage.
// For some reason increasing vstart will not remove the first line, and causes synchronization problems.
// It is easier read all lines from the beginning and ignore the garbage lines in the code.
const uint8_t QQVGA_VERTICAL_PADDING = 2;
const uint16_t vstart = 0;
const uint16_t vstop = 120 + QQVGA_VERTICAL_PADDING;

// 120 + 2 pixel (4 bytes) for padding.
// One from the beginning and three at the end.
const uint16_t hstart = 40+144;
const uint16_t hstop = 40;

const uint8_t regsQQVGA [][2] = {
    {REG_VSTART,vstart},
    {REG_VSTOP,vstop},
    {REG_VREF,0},
    {REG_HSTART,hstart >> 3},
    {REG_HSTOP,hstop >> 3},
    {REG_HREF,0b00000000 | (hstart & 0b111) | ((hstop & 0b111) << 3)},

    {REG_COM3, COM3_DCWEN}, // enable downsamp/crop/window
    {REG_COM14, 0x1a},        // divide by 4
    {SCALING_DCWCTR, 0x22},   // downsample by 4
    {SCALING_PCLK_DIV, 0xf2}, // divide by 4

    {0x00, 0x00},	/* END MARKER */
};

const uint8_t setDisablePixelClockDuringBlankLines[][2] = {
	{REG_COM10, COM10_PCLK_HB},
	{0x00, 0x00},	/* END MARKER */
};

const uint8_t setDisableHREFDuringBlankLines[][2] = {
	{REG_COM6, COM6_HREF_HB},
	{0x00, 0x00},	/* END MARKER */
};

const uint8_t OV7670_init[][2] = {
        {OV7670_REG_TSLB, OV7670_TSLB_YLAST},    // No auto window
        {OV7670_REG_COM10, OV7670_COM10_VS_NEG}, // -VSYNC (req by SAMD PCC)
        {OV7670_REG_SLOP, 0x20},
        {OV7670_REG_GAM_BASE, 0x1C},
        {OV7670_REG_GAM_BASE + 1, 0x28},
        {OV7670_REG_GAM_BASE + 2, 0x3C},
        {OV7670_REG_GAM_BASE + 3, 0x55},
        {OV7670_REG_GAM_BASE + 4, 0x68},
        {OV7670_REG_GAM_BASE + 5, 0x76},
        {OV7670_REG_GAM_BASE + 6, 0x80},
        {OV7670_REG_GAM_BASE + 7, 0x88},
        {OV7670_REG_GAM_BASE + 8, 0x8F},
        {OV7670_REG_GAM_BASE + 9, 0x96},
        {OV7670_REG_GAM_BASE + 10, 0xA3},
        {OV7670_REG_GAM_BASE + 11, 0xAF},
        {OV7670_REG_GAM_BASE + 12, 0xC4},
        {OV7670_REG_GAM_BASE + 13, 0xD7},
        {OV7670_REG_GAM_BASE + 14, 0xE8},
        {OV7670_REG_COM8,
         OV7670_COM8_FASTAEC | OV7670_COM8_AECSTEP | OV7670_COM8_BANDING},
        {OV7670_REG_GAIN, 0x00},
        {OV7670_COM2_SSLEEP, 0x00},
        {OV7670_REG_COM4, 0x00},
        {OV7670_REG_COM9, 0x20}, // Max AGC value
        {OV7670_REG_BD50MAX, 0x05},
        {OV7670_REG_BD60MAX, 0x07},
        {OV7670_REG_AEW, 0x75},
        {OV7670_REG_AEB, 0x63},
        {OV7670_REG_VPT, 0xA5},
        {OV7670_REG_HAECC1, 0x78},
        {OV7670_REG_HAECC2, 0x68},
        {0xA1, 0x03},              // Reserved register?
        {OV7670_REG_HAECC3, 0xDF}, // Histogram-based AEC/AGC setup
        {OV7670_REG_HAECC4, 0xDF},
        {OV7670_REG_HAECC5, 0xF0},
        {OV7670_REG_HAECC6, 0x90},
        {OV7670_REG_HAECC7, 0x94},
        {OV7670_REG_COM8, OV7670_COM8_FASTAEC | OV7670_COM8_AECSTEP |
                              OV7670_COM8_BANDING | OV7670_COM8_AGC |
                              OV7670_COM8_AEC},
        {OV7670_REG_COM5, 0x61},
        {OV7670_REG_COM6, 0x4B},
        {0x16, 0x02},            // Reserved register?
        {OV7670_REG_MVFP, 0x07}, // 0x07,
        {OV7670_REG_ADCCTR1, 0x02},
        {OV7670_REG_ADCCTR2, 0x91},
        {0x29, 0x07}, // Reserved register?
        {OV7670_REG_CHLF, 0x0B},
        {0x35, 0x0B}, // Reserved register?
        {OV7670_REG_ADC, 0x1D},
        {OV7670_REG_ACOM, 0x71},
        {OV7670_REG_OFON, 0x2A},
        {OV7670_REG_COM12, 0x78},
        {0x4D, 0x40}, // Reserved register?
        {0x4E, 0x20}, // Reserved register?
        {OV7670_REG_GFIX, 0x5D},
        {OV7670_REG_REG74, 0x19},
        {0x8D, 0x4F}, // Reserved register?
        {0x8E, 0x00}, // Reserved register?
        {0x8F, 0x00}, // Reserved register?
        {0x90, 0x00}, // Reserved register?
        {0x91, 0x00}, // Reserved register?
        {OV7670_REG_DM_LNL, 0x00},
        {0x96, 0x00}, // Reserved register?
        {0x9A, 0x80}, // Reserved register?
        {0xB0, 0x84}, // Reserved register?
        {OV7670_REG_ABLC1, 0x0C},
        {0xB2, 0x0E}, // Reserved register?
        {OV7670_REG_THL_ST, 0x82},
        {0xB8, 0x0A}, // Reserved register?
        {OV7670_REG_AWBC1, 0x14},
        {OV7670_REG_AWBC2, 0xF0},
        {OV7670_REG_AWBC3, 0x34},
        {OV7670_REG_AWBC4, 0x58},
        {OV7670_REG_AWBC5, 0x28},
        {OV7670_REG_AWBC6, 0x3A},
        {0x59, 0x88}, // Reserved register?
        {0x5A, 0x88}, // Reserved register?
        {0x5B, 0x44}, // Reserved register?
        {0x5C, 0x67}, // Reserved register?
        {0x5D, 0x49}, // Reserved register?
        {0x5E, 0x0E}, // Reserved register?
        {OV7670_REG_LCC3, 0x04},
        {OV7670_REG_LCC4, 0x20},
        {OV7670_REG_LCC5, 0x05},
        {OV7670_REG_LCC6, 0x04},
        {OV7670_REG_LCC7, 0x08},
        {OV7670_REG_AWBCTR3, 0x0A},
        {OV7670_REG_AWBCTR2, 0x55},
        {OV7670_REG_MTX1, 0x80},
        {OV7670_REG_MTX2, 0x80},
        {OV7670_REG_MTX3, 0x00},
        {OV7670_REG_MTX4, 0x22},
        {OV7670_REG_MTX5, 0x5E},
        {OV7670_REG_MTX6, 0x80}, // 0x40?
        {OV7670_REG_AWBCTR1, 0x11},
        {OV7670_REG_AWBCTR0, 0x9F}, // Or use 0x9E for advance AWB
        {OV7670_REG_BRIGHT, 0x00},
        {OV7670_REG_CONTRAS, 0x40},
        {OV7670_REG_CONTRAS_CENTER, 0x80}, // 0x40?
        {0x00, 0x00},       // End-of-data marker
};

static const unsigned char  OV_reg[][2] =
{

    {0x3a, 0x0c}, //0b00001100 TSLB[3]=1, V Y U Y
    // {0x67, 0xc0},
    // {0x68, 0x80},

    {0x40, 0xd0}, // 0b11010000 11: Output range: [00] to [FF], 01: RGB 565, effective only when RGB444[1] is low
    {0x12, 0x14}, // 0b00010100 Output format - QVGA selection, Output format RGB

    {0x32, 0x80},
   
    #if 1  //320*240使用
        {0x17, 0x17},//HSTART start high 8-bit MSB         
        {0x18, 0x05},//5 HSTOP end high 8-bit
        
    #else  //640*480使用
        {0x17, 0x14},//HSTART start high 8-bit MSB         
        {0x18, 0x02},//5 HSTOP end high 8-bit
    #endif
        
    {0x19, 0x03},
    {0x1a, 0x7b},
    {0x03, 0x05},

    {0x0c, 0x00}, //Bit[6]: Output data MSB and LSB swap
    {0x15, 0x00},
    {0x3e, 0x00}, // 1: DCW and scaling PCLK,  4: Divided by 16
    {0x70, 0x3a}, // test_pattern
    {0x71, 0x35},
    {0x72, 0x11},
    {0x73, 0x00},
            
    {0xa2, 0x02},
    {0x7a, 0x20},
    {0x7b, 0x1c},
    {0x7c, 0x28},
            
    {0x7d, 0x3c},
    {0x7e, 0x55},
    {0x7f, 0x68},
    {0x80, 0x76},
    {0x81, 0x80},
            
    {0x82, 0x88},
    {0x83, 0x8f},
    {0x84, 0x96},
    {0x85, 0xa3},
    {0x86, 0xaf},
            
    {0x87, 0xc4},
    {0x88, 0xd7}, // 0b11010111
    {0x89, 0xe8},
    {0x13, 0xe0},
    {0x00, 0x00},
            
    {0x10, 0x00},
    {0x0d, 0x00},
    {0x14, 0x28},
    {0xa5, 0x05},
    {0xab, 0x07},
            
    {0x24, 0x75},
    {0x25, 0x63},
    {0x26, 0xA5},
    {0x9f, 0x78},
    {0xa0, 0x68},
            
    {0xa1, 0x03},
    {0xa6, 0xdf},
    {0xa7, 0xdf},
    {0xa8, 0xf0},
    {0xa9, 0x90},
            
    {0xaa, 0x94},
    {0x13, 0xe5},
    {0x0e, 0x61},
    {0x0f, 0x4b},
    {0x16, 0x02},
     
    {0x1e, 0x37},
    {0x21, 0x02},
    {0x22, 0x91},
    {0x29, 0x07},
    {0x33, 0x0b},
            
    {0x35, 0x0b},
    {0x37, 0x1d},
    {0x38, 0x71},
    {0x39, 0x2a},
    {0x3c, 0x78},
            
    {0x4d, 0x40},
    {0x4e, 0x20},
    {0x69, 0x00},
    /*
    emWin的情况下64MHz和48MHz稳定，72MHz不行，快了，容易错误
    6B寄存器  bit6:7
            00 bypass PLL
            01 X4
            10 X6
            11 X8

    11寄存器  bit7 保留
              bit6 直接使用外部时钟
              bit5:0
              实际内部时钟的输出 = Finputclk / (bit[5:0] + 1)

    摄像头晶振是24MHz ，当前配置24 * 4 / 2 = 48MHz
    */
    {0x11, 0x01},
    {0x6b, 0x40},
    {0x74, 0x1b}, // Digital gain manual control 1x
    {0x8d, 0x4f},
            
    {0x8e, 0x00},
    {0x8f, 0x00},
    {0x90, 0x00},
    {0x91, 0x00},
    {0x92, 0x00},

            
    {0x96, 0x00},
    {0x9a, 0x80},
    {0xb0, 0x84},
    {0xb1, 0x0c},
    {0xb2, 0x0e},
            
    {0xb3, 0x82},
    {0xb8, 0x0a},
    {0x43, 0x14},
    {0x44, 0xf0},
    {0x45, 0x34},
            
    {0x46, 0x58},
    {0x47, 0x28},
    {0x48, 0x3a},
    {0x59, 0x88},
    {0x5a, 0x88},
            
    {0x5b, 0x44},
    {0x5c, 0x67},
    {0x5d, 0x49},
    {0x5e, 0x0e},
    {0x64, 0x04},
    {0x65, 0x20},
            
    {0x66, 0x05},
    {0x94, 0x04},
    {0x95, 0x08},
    {0x6c, 0x0a},
    {0x6d, 0x55},
            
            
    {0x4f, 0x80},
    {0x50, 0x80},
    {0x51, 0x00},
    {0x52, 0x22},
    {0x53, 0x5e},
    {0x54, 0x80},   
            
            
    {0x09, 0x03},

    {0x6e, 0x11},
    {0x6f, 0x9f},
    {0x55, 0x00},
    {0x56, 0x40},
    {0x57, 0x40},

    {0x6a, 0x40},
    {0x01, 0x40},
    {0x02, 0x40},
    {0x13, 0xe7},
    {0x15, 0x00},  


    {0x58, 0x9e},

    {0x41, 0x08},
    {0x3f, 0x00},
    {0x75, 0x05},
    {0x76, 0xe1},
    {0x4c, 0x00},
    {0x77, 0x01},
    {0x3d, 0xc2},
    {0x4b, 0x09},
    {0xc9, 0x60},
    {0x41, 0x38},

    {0x34, 0x11},
    {0x3b, 0x02},

    {0xa4, 0x89},
    {0x96, 0x00},
    {0x97, 0x30},
    {0x98, 0x20},
    {0x99, 0x30},
    {0x9a, 0x84},
    {0x9b, 0x29},
    {0x9c, 0x03},
    {0x9d, 0x4c},
    {0x9e, 0x3f},
    {0x78, 0x04},

    {0x79, 0x01},
    {0xc8, 0xf0},
    {0x79, 0x0f},
    {0xc8, 0x00},
    {0x79, 0x10},
    {0xc8, 0x7e},
    {0x79, 0x0a},
    {0xc8, 0x80},
    {0x79, 0x0b},
    {0xc8, 0x01},
    {0x79, 0x0c},
    {0xc8, 0x0f},
    {0x79, 0x0d},
    {0xc8, 0x20},
    {0x79, 0x09},
    {0xc8, 0x80},
    {0x79, 0x02},
    {0xc8, 0xc0},
    {0x79, 0x03},
    {0xc8, 0x40},
    {0x79, 0x05},
    {0xc8, 0x30},
    {0x79, 0x26},
    {0x09, 0x00},
};

// https://blog.csdn.net/zdzh1/article/details/21739589
const uint8_t OV7670_Reg1[][2]=
{
  //Frame Rate Adjustment for 24Mhz input clock
  //30fps PCLK=24MHz
  {0x11, 0x80},//软件应用手册上设置的是0x80，例程设置的是0x00
  {0x6b, 0x0a},//PLL控制,软件应用手册上设置的是0x0a,例程设置的是0x40,将PLL调高的话就会产生花屏
  {0x2a, 0x00},
  {0x2b, 0x00},
  {0x92, 0x00},
  {0x93, 0x00},
  {0x3b, 0x0a},

  //Output format
  {0x12, 0x14},//QVGA(320*240)、RGB
  //{0x12, 0x0},//VGA(640*480)、RGB
  //RGB555/565 option(must set COM7[2] = 1 and COM7[0] = 0)
  //{0x40, 0x10},//RGB565,effective only when RGB444[1] is low
  {0x40, 0xd0}, // 0b11010000 11: Output range: [00] to [FF], 01: RGB 565, effective only when RGB444[1] is low
  {0x8c, 0x00},

  //Special effects - 特效 
  //normal
  {0x3a, 0x04},
  {0x67, 0xc0},
  {0x68, 0x80},

  //Mirror/VFlip Enable - 水平镜像/竖直翻转使能
  {0x1e, 0x37},//修改配置值将产生图像显示上下或左右颠倒

  //Banding Filter Setting for 24Mhz Input Clock - 条纹滤波器
  //30fps for 60Hz light frequency
  {0x13, 0xe7},//banding filer enable
  {0x9d, 0x98},//50Hz banding filer
  {0x9e, 0x7f},//60Hz banding filer
  {0xa5, 0x02},//3 step for 50Hz
  {0xab, 0x03},//4 step for 60Hz
  {0x3b, 0x02},//select 60Hz banding filer

  //Simple White Balance - 白平衡
  {0x13, 0xe7},//AWB、AGC、AGC Enable and ...
  {0x6f, 0x9f},//simple AWB

  //AWBC - 自动白平衡控制(Automatic white balance control) 
  {0x43, 0x14},//用户手册里这些寄存器的值都是保留(Reserved),不用设置的呀？
  {0x44, 0xf0},
  {0x45, 0x34},        
  {0x46, 0x58},
  {0x47, 0x28},
  {0x48, 0x3a},

  //AWB Control
  {0x59, 0x88},//用户手册连寄存器都是保留，初始值都没提供
  {0x5a, 0x88},        
  {0x5b, 0x44},
  {0x5c, 0x67},
  {0x5d, 0x49},
  {0x5e, 0x0e},

  //AWB Control
  {0x6c, 0x0a},
  {0x6d, 0x55},       
  {0x6e, 0x11},
  {0x6f, 0x9f},
  
//   AGC/AEC - Automatic Gain Control自动增益补偿/Automatic exposure Control自动曝光控制
//   {0x00, 0x00},
//   {0x14, 0x20},
//   {0x24, 0x75},
//   {0x25, 0x63},
//   {0x26, 0xA5},

  //AEC algorithm selection - AEC公式选择    
  {0xaa, 0x94},//基于平均值的AEC算法Average-based AEC algorithm/基于直方图的AEC算法Histogram-based AEC algorithm  

  //基于直方图的AGC/AEC的控制
  {0x9f, 0x78},
  {0xa0, 0x68},       
  {0xa6, 0xdf},
  {0xa7, 0xdf},
  {0xa8, 0xf0},
  {0xa9, 0x90},

  //Fix Gain Control - 固定增益控制    
  {0x69, 0x5d},//Fix gain for Gr channel/for Gb channel/for R channel/for B channel

  //Color saturation 颜色饱和度 + 0
  {0x4f, 0x80},
  {0x50, 0x80},
  {0x51, 0x00},
  {0x52, 0x22},
  {0x53, 0x5e},
  {0x54, 0x80},
  {0x58, 0x9e},

  //Brightness - 亮度 + 0
  //{0x55, 0x00},

  //Contrast - 对比度 + 0
  {0x56, 0x40},

  //Gamma Curve - 伽马曲线
  {0x7a, 0x20},
  {0x7b, 0x1c},
  {0x7c, 0x28},        
  {0x7d, 0x3c},
  {0x7e, 0x55},
  {0x7f, 0x68},
  {0x80, 0x76},
  {0x81, 0x80},        
  {0x82, 0x88},
  {0x83, 0x8f},
  {0x84, 0x96},
  {0x85, 0xa3},
  {0x86, 0xaf},        
  {0x87, 0xc4},
  {0x88, 0xd7},
  {0x89, 0xe8},

  //Matrix Coefficient - 色彩矩阵系数            
  {0x4f, 0x80},
  {0x50, 0x80},
  {0x51, 0x00},
  {0x52, 0x22},
  {0x53, 0x5e},
  {0x54, 0x80},

  //Lens Correction Option - 镜头补偿选项
  {0x62, 0x00},       
  {0x63, 0x00},
  {0x64, 0x04},
  {0x65, 0x20},        
  {0x66, 0x05},
  {0x94, 0x04},//effective only when LCC5[2] is high
  {0x95, 0x08},//effective only when LCC5[2] is high


  //注释这些配置的话，就倾斜显示，并显示多块，这到底是控制什么的？跟时序图有关？
  {0x17, 0x16},//行频Horizontal Frame开始高八位(低三位在HREF[2：0])       
  {0x18, 0x04},//行频Horizontal Frame结束高八位(低三位在HREF[5：3])
  {0x19, 0x02},//场频Vertical Frame开始高八位(低二位在VREF[1：0])
  {0x1a, 0x7b},//场频Vertical Frame结束高八位(低二位在VREF[3：2])
  {0x32, 0x80},//HREF
  {0x03, 0x06},//VREF

  //注释这个配置的话，就显示花屏了
  {0x15, 0x02},//配置PCLK、HREF、VSYNC相关

  //Automatic black Level Compensation - 自动黑电平校正
  {0xb0, 0x84},//调试时注释这项配置时，颜色显示不正常了，红色练绿色，绿色变红色，但用户手册对这寄存器是保留RSVD
  //{0xb1, 0x0c},
  //{0xb2, 0x0e},      
  //{0xb3, 0x82},
  //{0xb8, 0x0a},

  //SCALING_xx寄存器
  {0x70, 0x00},
  {0x71, 0x00},
  {0x72, 0x11},
  {0x73, 0x08},
  {0x3e, 0x00},

  //ADC
  {0x37, 0x1d},//ADC控制ADC Control
  {0x38, 0x71},//ADC和模拟共模控制ADC and Analog Common Mode Control
  {0x39, 0x2a},//ADC偏移控制ADC Offset Control

  //零杂的寄存器
  {0x92, 0x00},//空行低八位Dummy Line low 8 bits
  {0xa2, 0x02},//像素时钟延时
  {0x0c, 0x0c},
  {0x10, 0x00},
  {0x0d, 0x01},
  {0x0f, 0x4b},
  {0x3c, 0x78},
  {0x74, 0x19},

  //用户手册里这几个寄存器都是保留RSVD
  {0x0e, 0x61},
  {0x16, 0x02},
  {0x21, 0x02},
  {0x22, 0x91},
  {0x29, 0x07},
  {0x33, 0x0b},
  {0x35, 0x0b},
  {0x4d, 0x40},
  {0x4e, 0x20},
  {0x8d, 0x4f},        
  {0x8e, 0x00},
  {0x8f, 0x00},
  {0x90, 0x00},
  {0x91, 0x00},
  {0x96, 0x00},
  {0x9a, 0x80},     
  {0x00, 0x00}                       
};

const uint8_t ov7670_vga[][2] = {

};

#endif
